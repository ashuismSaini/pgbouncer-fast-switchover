diff --git a/src/server.c b/src/server.c
index c6e5efe..c46ef7b 100644
--- a/src/server.c
+++ b/src/server.c
@@ -27,6 +27,46 @@
 
 #define ERRCODE_CANNOT_CONNECT_NOW "57P03"
 
+bool routing_traffic_to_target_complete = false;
+
+/*
+* Returns the query data from the server. This must be freed.
+*/
+static char *query_data(PktHdr *pkt)
+{
+	uint16_t columns;
+	uint32_t length;
+	const char *data;
+	char *output;
+
+	if (!mbuf_get_uint16be(&pkt->data, &columns))
+	{
+		log_error("could not get packet column count");
+		return NULL;
+	}
+	if (!mbuf_get_uint32be(&pkt->data, &length))
+	{
+		log_error("could not get packet length");
+		return NULL;
+	}
+	if (!mbuf_get_chars(&pkt->data, length, &data))
+	{
+		log_error("could not get packet data");
+		return NULL;
+	}
+
+	output = strndup(data, length);
+	if (output == NULL) {
+		log_error("strdup: no mem in query_data");
+		return NULL;
+	}
+
+	log_debug("data from DataRow: %s, length: %d, strlen: %lu", output, length, strlen(output));
+
+	return output;
+}
+
+
 static bool load_parameter(PgSocket *server, PktHdr *pkt, bool startup)
 {
 	const char *key, *val;
@@ -122,6 +162,8 @@ static bool handle_server_startup(PgSocket *server, PktHdr *pkt)
 	const char *msg;
 	bool res = false;
 	const uint8_t *ckey;
+	char *data = NULL;
+	char *hostname = NULL;
 
 	if (incomplete_pkt(pkt)) {
 		disconnect_server(server, true, "partial pkt in login phase");
@@ -133,12 +175,16 @@ static bool handle_server_startup(PgSocket *server, PktHdr *pkt)
 		switch (pkt->type) {
 		case PqMsg_ReadyForQuery:
 		case PqMsg_ParameterStatus:
+		case PqMsg_DataRow:
 			/* handle them below */
 			break;
 
 		case PqMsg_ErrorResponse:
 			/* log & ignore errors */
 			log_server_error("S: error while executing exec_on_query", pkt);
+			// require topology table to exist in the cluster if using
+			if (fast_switchover)
+				fatal("does the topology table exist?");
 		/* fallthrough */
 		default:	/* ignore rest */
 			sbuf_prepare_skip(sbuf, pkt->len);
@@ -152,6 +198,41 @@ static bool handle_server_startup(PgSocket *server, PktHdr *pkt)
 		disconnect_server(server, true, "unknown pkt from server");
 		break;
 
+	case PqMsg_DataRow:
+		if (fast_switchover && server->pool->db->topology_query && server->pool->initial_writer_endpoint) {
+			data = query_data(pkt);
+			log_debug("got initial data: %s", data);
+
+			hostname = strdup(data);
+			if (hostname == NULL) {
+				log_error("strdup: no mem for hostname");
+				free(data);
+				return NULL;
+			}
+
+			if (!strtok(data, ".")) {
+				log_error("could not parse hostname from: %s", data);
+			} else {
+				PgPool *new_pool = new_pool_from_db(server->pool->db, data, hostname);
+				if (new_pool) {
+					new_pool->parent_pool = server->pool;
+					new_pool->parent_pool->global_writer = server->pool;
+					new_pool->db->topology_query = strdup(server->pool->db->topology_query);
+					if (server->pool->db->recovery_query) {
+						new_pool->db->recovery_query = strdup(server->pool->db->recovery_query);
+					}
+					launch_new_connection(new_pool, true);
+					server->pool->num_nodes++;
+				}
+			}
+
+			free(data);
+			free(hostname);
+		}
+
+		sbuf_prepare_skip(sbuf, pkt->len);
+		return true;
+
 	case PqMsg_ErrorResponse:
 		/*
 		 * If we cannot log into the server, then we drop all clients
@@ -201,7 +282,42 @@ static bool handle_server_startup(PgSocket *server, PktHdr *pkt)
 			if (!res)
 				disconnect_server(server, false, "exec_on_connect query failed");
 			break;
+		} else if (fast_switchover && server->pool->db->topology_query && server->pool->initial_writer_endpoint) {
+			server->exec_on_connect = true;
+			slog_debug(server, "server connect ok, send topology_query: %s", server->pool->db->topology_query);
+			SEND_generic(res, server, PqMsg_Query, "s", server->pool->db->topology_query);
+			if (!res)
+				disconnect_server(server, false, "exec_on_connect query failed");
+			break;
+		} else if (fast_switchover && server->pool->db->recovery_query && routing_traffic_to_target_complete) {
+			/*
+			 * After the switchover is completed, we set 'routing_traffic_to_target_complete' to true in 'handle_server_work'.
+			 * Once DNS resolution is complete for the target instance, the new DNS becomes available for queries.
+			 * Here, we monitor the startup status of the new blue instance and the 'routing_traffic_to_target_complete' flag.
+			 * Once both conditions are met, we disable the fast switchover feature.
+			 */
+			log_debug("Once the switchover is completed for DB : %s, disabling the fast switchover and reverting PgBouncer to standard connection pooling mode.", server->pool->db->name);
+			if (!server->pool->parent_pool) {
+				server->pool->parent_pool = server->pool;
+			}
+			server->pool->parent_pool->global_writer = server->pool;
+			fast_switchover = false;
+			routing_traffic_to_target_complete = false;
+		}
+
+		if (server->pool->db->topology_query && server->pool->initial_writer_endpoint && server->pool->num_nodes < 2) {
+			if (server->pool->db->recovery_query) {
+				/*
+				 * If Blue-Green Deployment fast switchover is configured on an instance/cluster node without actually creating a Blue-Green Deployment, the metadata table will return no nodes.
+				 * In this case, PgBouncer will not crash. Instead, it will disable the fast switchover feature and revert to the standard PgBouncer behavior.
+				 */
+				fast_switchover = false;
+				log_debug("topology_query did not find at least 2 nodes to use Blue Green Deployment fast switchover for DB: '%s'. PgBouncer reverting to standard connection pooling mode.", server->pool->db->name);
+			} else {
+				fatal("topology_query did not find at least 2 nodes to use fast switchover in DB: '%s'. Is the topology table populated with entries?", server->pool->db->name);
+			}
 		}
+		server->pool->initial_writer_endpoint = false;
 
 		/* login ok */
 		slog_debug(server, "server login ok, start accepting queries");
@@ -363,6 +479,7 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 	bool async_response = false;
 	struct List *item, *tmp;
 	bool ignore_packet = false;
+	bool res = false;
 
 	Assert(!server->pool->db->admin);
 
@@ -374,6 +491,15 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 
 	/* pooling decisions will be based on this packet */
 	case PqMsg_ReadyForQuery:
+		/*
+		 * Discard topology data without sending to the client is finished. Resume regular
+		 * client/server communication.
+		 */
+		if (fast_switchover && server->pool->db->topology_query && server->pool->collect_datarows) {
+			server->pool->collect_datarows = false;
+			sbuf_prepare_skip(sbuf, pkt->len);
+			return true;
+		}
 
 		/* if partial pkt, wait */
 		if (!mbuf_get_char(&pkt->data, &state))
@@ -461,6 +587,22 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 		break;
 
 	case PqMsg_CommandComplete:
+		/*
+		 * In the process of discarding topology data without sending to the client.
+		 */
+		if (server->pool->collect_datarows) {
+			sbuf_prepare_skip(sbuf, pkt->len);
+			return true;
+		} else if (fast_switchover && server->pool->db->recovery_query && server->pool->checking_for_new_writer && server->state != SV_TESTED) {
+			/*
+			 * This handles a corner case where the recovery query did not return any data rows for any reason.
+			 * To keep searching for the new writer, we set `checking_for_new_writer` to false for this pool,
+			 * allowing the recovery query to run again through this pool.
+			 */
+			log_debug("handle_server_work: switchover started retrying to get the state of Blue Green deployment, db_name: %s", server->pool->db->name);
+			server->pool->checking_for_new_writer = false;
+		}
+
 		/* ErrorResponse and CommandComplete show end of copy mode */
 		if (server->copy_mode) {
 			slog_debug(server, "COPY finished");
@@ -545,6 +687,37 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 	/* data packets, there will be more coming */
 	case PqMsg_CopyData:
 	case PqMsg_DataRow:
+		/*
+		 * These are the rows returned from the topology query that are discarded.
+		 */
+		if (server->pool->collect_datarows) {
+			sbuf_prepare_skip(sbuf, pkt->len);
+			return true;
+		} else if (fast_switchover && server->pool->checking_for_new_writer && server->state != SV_TESTED) {
+			char *data = query_data(pkt);
+			/*
+			 * Once the switchover begins, the recovery query will run on the target instance to retrieve the switchover status from the metadata table.
+			 * When the status changes to either SWITCHOVER_IN_POST_PROCESSING or SWITCHOVER_COMPLETED,
+			 * it indicates that the target instance is ready for accepting the writes, and we can safely update the global writer to point to the target instance.
+			 */
+			if (strcmp(data, "f") == 0 || ((strcmp(data, SWITCHOVER_IN_POST_PROCESSING) == 0) || (strcmp(data, SWITCHOVER_COMPLETED) == 0))) {
+				log_debug("handle_server_work: connected to writer (pg_is_in_recovery is '%s'): db_name %s", data, server->pool->db->name);
+
+				if (!server->pool->parent_pool) {
+					server->pool->parent_pool = server->pool;
+				}
+				server->pool->parent_pool->global_writer = server->pool;
+				// new writer has been found, so indicate that we need to refresh the topology.
+				server->pool->refresh_topology = true;
+				if (server->pool->db->recovery_query) {
+					routing_traffic_to_target_complete =  true;
+				}
+			} else {
+				log_debug("handle_server_work: connected to reader (pg_is_in_recovery is '%s'). db_name: %s, Must keep polling until next server.", data, server->pool->db->name);
+			}
+			server->pool->checking_for_new_writer = false;
+			free(data);
+		}
 		break;
 	}
 	server->idle_tx = idle_tx;
@@ -632,7 +805,7 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 			}
 		}
 	} else {
-		if (server->state != SV_TESTED) {
+		if (server->state != SV_TESTED && !server->pool->db->topology_query) {
 			slog_warning(server,
 				     "got packet '%c' from server when not linked",
 				     pkt_desc(pkt));
@@ -640,6 +813,19 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 		sbuf_prepare_skip(sbuf, pkt->len);
 	}
 
+	/*
+	 * pg_is_in_recovery() finished since we received a ReadyForQuery and refresh_topology is set.
+	 * Mark the pool as needing to collect data rows and send the topology query to the writer.
+	 */
+	if (server->pool->refresh_topology && pkt->type == 'Z') {
+		server->pool->collect_datarows = true;
+		server->pool->refresh_topology = false;
+
+		SEND_generic(res, server, PqMsg_Query, "s", server->pool->db->topology_query);
+		if (!res)
+			disconnect_server(server, false, "exec_on_connect query failed");
+		}
+
 	return true;
 }
 
@@ -754,6 +940,7 @@ bool server_proto(SBuf *sbuf, SBufEvent evtype, struct MBuf *data)
 	bool res = false;
 	PgSocket *server = container_of(sbuf, PgSocket, sbuf);
 	PgPool *pool = server->pool;
+	PgPool *global_writer = get_global_writer(pool);
 	PktHdr pkt;
 	char infobuf[96];
 
@@ -768,8 +955,18 @@ bool server_proto(SBuf *sbuf, SBufEvent evtype, struct MBuf *data)
 	case SBUF_EV_RECV_FAILED:
 		if (server->state == SV_ACTIVE_CANCEL)
 			disconnect_server(server, false, "successfully sent cancel request");
-		else
+		else {
+			if (global_writer)
+				clear_global_writer(pool);
+
+			// mark main pool as failed as well (the writer)
+			if (fast_switchover) {
+				pool->last_failed_time = get_cached_time();
+				pool->last_connect_failed = true;
+				server->pool->checking_for_new_writer = false;
+			}
 			disconnect_server(server, false, "server conn crashed?");
+		}
 		break;
 	case SBUF_EV_SEND_FAILED:
 		disconnect_client(server->link, false, "unexpected eof");
@@ -810,6 +1007,10 @@ bool server_proto(SBuf *sbuf, SBufEvent evtype, struct MBuf *data)
 		break;
 	case SBUF_EV_CONNECT_FAILED:
 		Assert(server->state == SV_LOGIN);
+		if (fast_switchover) {
+			pool->last_failed_time = get_cached_time();
+			server->pool->checking_for_new_writer = false;
+		}
 		disconnect_server(server, false, "connect failed");
 		break;
 	case SBUF_EV_CONNECT_OK:
